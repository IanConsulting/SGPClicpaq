@page "/viajes"
<h1>Viajes</h1>
<p>Descripción viajes trafico</p>
<hr />

<button class="btn btn-outline-success" @onclick="() => gotocreaviaje(0)">Agregar</button>
<br />
<br />

<RadzenDataGrid AllowFiltering="true" AllowColumnResize="true" AllowAlternatingRows="false" FilterMode="FilterMode.Advanced" AllowSorting="true" PageSize="10"
                AllowPaging="true" PagerHorizontalAlign="HorizontalAlign.Left" ShowPagingSummary="true" EmptyText="No hay viajes para mostrar."
                Data="@oRespuesta.List" TItem="Viaje" ColumnWidth="250px" LogicalFilterOperator="LogicalFilterOperator.Or">
    <Columns>
        <RadzenDataGridColumn TItem="Viaje" Property="Id" Filterable="false" Title="ID" Frozen="true" Width="50px" TextAlign="TextAlign.Center" />
        <RadzenDataGridColumn TItem="Viaje" Property="ZonaDestino" Title="Zona de destino" Width="120px" />
        <RadzenDataGridColumn TItem="Viaje" Property="Unidad" Title="Unidad" Width="80px" />
        <RadzenDataGridColumn TItem="Viaje" Property="" Title="Chofer" Width="80px">
            <Template Context="data">
                <a>@getChofer(data.Chofer)</a>
            </Template>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn TItem="Viaje" Property="" Title="" Frozen="true" Sortable="false" Filterable="false" Width="50px">
            <Template Context="data">
                <button class="btn btn-outline-danger" @onclick="() => alertaDeletear(data.Id)"><FeatherTrash2 Color="black"></FeatherTrash2></button>
            </Template>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn TItem="Viaje" Property="" Title="" Frozen="true" Sortable="false" Filterable="false" Width="50px">
            <Template Context="data">
                <button class="btn btn-outline-secondary" @onclick="() => gotocreaviaje(data.Id)"><FeatherEdit Color="black"></FeatherEdit></button>
            </Template>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn TItem="Viaje" Property="" Title="" Frozen="true" Sortable="false" Filterable="false" Width="50px">
            <Template Context="data">
                <button class="btn btn-outline-primary" @onclick="() => info(data.Id)"><FeatherInfo Color="black"></FeatherInfo></button>
            </Template>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn TItem="Viaje" Property="" Title="" Frozen="true" Sortable="false" Filterable="false" Width="50px">
            <Template Context="data">
                <button class="btn btn-outline-success" @onclick="() => alertaMandarDepo(data.Id)"><FeatherPackage Color="black"></FeatherPackage></button>
            </Template>
        </RadzenDataGridColumn>
    </Columns>
</RadzenDataGrid>


@code {
    Respuesta<List<Viaje>> oRespuesta = new();
    [CascadingParameter] public IModalService Modal { get; set; } = default!;
    Respuesta<List<Chofer>> oRtaChoferes = new();

    protected override async Task OnInitializedAsync()
    {
        await Get();
    }

    async Task Get()
    {
        var respuesta = await http.GetFromJsonAsync<Respuesta<List<Viaje>>>("/api/Viaje");
        try
        {
            oRtaChoferes = await http.GetFromJsonAsync<Respuesta<List<Chofer>>>("/api/chofer");

            oRespuesta = respuesta;
            oRespuesta.List = respuesta.List.Where(x => x.Estado == "Creado").ToList();
        }
        catch (Exception ex)
        {
            oRespuesta.Mensaje = ex.Message;
            Console.WriteLine("asd");
        }
    }

    string getChofer(decimal? id)
    {
        var nombre = oRtaChoferes.List.Where(x => x.Legajo == id).First().Nombre;
        var apellido = oRtaChoferes.List.Where(x => x.Legajo == id).First().Apellido;
        var completo = nombre + " " + apellido;
        return (completo);
    }

    async Task Deletear(int id)
    {
        await http.DeleteAsync($"/api/Viaje/{id}");
        await Get();
    }

    async Task MandarDepo(int id)
    {
        var respuesta = await http.GetFromJsonAsync<Respuesta<Viaje>>($"/api/Viaje/{id}");
        var oViaje = respuesta.List;
        oViaje.Estado = "Deposito";
        await http.PutAsJsonAsync<Viaje>("api/viaje", oViaje);
        await Get();
    }

    async Task gotocreaviaje(int id)
    {
        nav.NavigateTo($"/creaviaje/{id}");
    }

    public async Task verRequisitosDepo(Viaje data)
    {
        if (data.Unidad != null && data.TotalGuias != 0) alertaMandarDepo(data.Id);
        else if (data.TotalGuias == 0)
        {
            ShowNotification(new NotificationMessage
                {
                    Style = "position: right;",
                    Severity = NotificationSeverity.Warning,
                    Summary = "No se puede enviar a depósito",
                    Detail = "El viaje no tiene guias",
                    Duration = 4000
                });

        }
        else
        {
            ShowNotification(new NotificationMessage
                {
                    Style = "position: right;",
                    Severity = NotificationSeverity.Warning,
                    Summary = "No se puede enviar a depósito",
                    Detail = "El viaje no tiene vehículo",
                    Duration = 4000
                });

        }
    }

    async Task alertaMandarDepo(int id)
    {
        SweetAlertResult result = await Swal.FireAsync(new SweetAlertOptions
            {
                Title = "¿Está seguro?",
                Text = "Este viaje se enviará a deposito",
                Icon = SweetAlertIcon.Warning,
                ShowCancelButton = true,
                ConfirmButtonText = "Enviar",
                CancelButtonText = "Cancelar"
            });

        if (!string.IsNullOrEmpty(result.Value))
        {
            await MandarDepo(id);

        }
        else if (result.Dismiss == DismissReason.Cancel)
        {

        }
    }

    async Task alertaDeletear(int id)
    {
        SweetAlertResult result = await Swal.FireAsync(new SweetAlertOptions
            {
                Title = "¿Está seguro?",
                Text = "Eliminará este viaje",
                Icon = SweetAlertIcon.Warning,
                ShowCancelButton = true,
                ConfirmButtonText = "Eliminar",
                CancelButtonText = "Cancelar"
            });

        if (!string.IsNullOrEmpty(result.Value))
        {
            await Deletear(id);

        }
        else if (result.Dismiss == DismissReason.Cancel)
        {

        }
    }

    async Task info(int id)
    {
        var parameters = new ModalParameters();
        parameters.Add(nameof(ModalInfo.id), id);
        var options = new ModalOptions() {
                HideHeader=true
    };

        var formModal = Modal.Show<ModalInfo>("", parameters,options);
        var result = await formModal.Result;
        if (result.Cancelled)
        {
            Console.WriteLine("Modal was cancelled");
        }
        else
        {
            await OnInitializedAsync();
            StateHasChanged();
        }


    }

    void ShowNotification(NotificationMessage message)
    {
        NotificationService.Notify(message);
    }
}